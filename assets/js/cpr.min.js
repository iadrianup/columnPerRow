class ColumnsPerRow{constructor(t){const e=this.getDefaults();this.config=void 0===t?e:this.mergeConfig(e,t),this.buildControls(),this.buildGallery(),this.handleControls()}buildControls(){const{controls:{customHtml:t}}=this.config;if(!t){const{container:t,controls:{container:e,label:o,breakpoints:n}}=this.config,s=document.createElement("ul");s.classList.add("cpr-controls");const r=document.querySelector(t),l=r.getAttribute("id"),c=ColumnsPerRow.getCurrentBreakpoint(),a=this.config.controls.breakpoints[c].default;let i=[];Object.keys(n).forEach(t=>{null!==typeof n[t]&&n[t].opts.forEach(e=>{let o=i.find(t=>t.opt==e);if(o)o.classes+="visible-"+t+" ";else{let o={opt:e,classes:"visible-"+t+" "};i.push(o)}})}),i.sort();let d,u="<li>"+o+"</li>";i.forEach(t=>{let e=t.classes.replace(/\s+$/,"");e+=t.opt===a?" active":"",u+=`\n                <li class="${e}"><a href="#${l}" class="cpr-control" role="button" title="${t.opt} columns per row" aria-controls="${l}" data-cpr="${t.opt}">${t.opt}</a></li>`}),s.innerHTML=u,null!==e?(d=document.querySelector(e)).prepend(s):(d=r.parentNode).insertBefore(s,r)}}buildGallery(){const{container:t,controls:{breakpoints:e},transitions:o}=this.config,n=document.querySelector(t);n.classList.add("cpr-grid"),Object.keys(e).forEach(t=>{null!==typeof e[t]&&n.classList.add("cpr-"+t+"-"+e[t].default)}),o&&n.classList.add("cpr-transitions")}handleControls(){const{container:t}=this.config,e=document.querySelector(t).getAttribute("id"),o=document.querySelectorAll('.cpr-control[aria-controls="'+e+'"]');o.length&&o.forEach(t=>t.addEventListener("click",e=>{e.preventDefault(),ColumnsPerRow.updateControlClasses(t,o),ColumnsPerRow.updateGrid(t,ColumnsPerRow.getCurrentBreakpoint())}))}getDefaults(){return{container:".cpr-container",controls:{customHtml:!1,container:null,label:"Ver:",breakpoints:{xs:{opts:[1,2],default:1},sm:{opts:[1,2],default:2},md:{opts:[3,4],default:3},lg:{opts:[3,4],default:4},xl:{opts:[3,4,5],default:4}}},transitions:!1,data:null}}mergeConfig(t,e){let o,n,s;return e.hasOwnProperty("controls")?(s=e.controls.hasOwnProperty("breakpoints")?Object.assign(t.controls.breakpoints,e.controls.breakpoints):t.controls.breakpoints,n=Object.assign(t.controls,e.controls)):(n=t.controls,s=t.controls.breakpoints),(o=Object.assign(t,e)).controls=n,o.controls.breakpoints=s,o}static getCurrentBreakpoint(){let t,e=getComputedStyle(document.documentElement).getPropertyValue("--cpr-xs"),o=getComputedStyle(document.documentElement).getPropertyValue("--cpr-sm"),n=getComputedStyle(document.documentElement).getPropertyValue("--cpr-md"),s=getComputedStyle(document.documentElement).getPropertyValue("--cpr-lg"),r=getComputedStyle(document.documentElement).getPropertyValue("--cpr-xl");return window.matchMedia("(min-width: "+e+") and (max-width: "+o+")").matches?t="xs":window.matchMedia("(min-width: "+o+") and (max-width: "+n+")").matches?t="sm":window.matchMedia("(min-width: "+n+") and (max-width: "+s+")").matches?t="md":window.matchMedia("(min-width: "+s+") and (max-width: "+r+")").matches?t="lg":window.matchMedia("(min-width: "+r+")").matches&&(t="xl"),t}static updateControlClasses(t,e){e.length&&e.forEach(t=>t.parentElement.classList.remove("active")),t.parentElement.classList.add("active")}static updateGrid(t,e){const o=t.getAttribute("href"),n=document.querySelector(o);if(document.body.contains(n)){const o=t.dataset.cpr,s=n.classList.value;n.classList.replace(s.match(new RegExp("cpr[-]("+e+")[-](0?[1-9]|1[012])"))[0],"cpr-"+e+"-"+o)}}}